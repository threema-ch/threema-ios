// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: url-payloads.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// # URL Payloads
//
// These payloads are part of universal URLs (e.g. group invite links). After
// serializing the protobuf messages, they are encoded in URL safe Base64
// (according to RFC 3548).
//
// Note: Be aware that there is no canonical representation of a URL if it
// contains a protobuf message.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Group invitation containing information to request joining a group.
///
/// Generated by the administrator of a group. The resulting URL can be shared
/// freely with anyone. The invitation can be invalidated by the administrator
/// at any point.
///
/// The URL is formed using the `threema.group` domain in the following way:
///
/// ```text
/// https://threema.group/join#<url-safe-base64(GroupInvite)>
/// ```
///
/// Example:
///
/// ```text
/// https://threema.group/join#CghFQ0hPRUNITxIQaNbxfd3QsToW0c_668fXUhobQSBuaWNlIGxpdHRsZSBUaHJlZW1hIGdyb3Vw
/// ```
public struct Url_GroupInvite: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The admin's Threema ID (8 bytes ASCII)
  public var adminIdentity: String = String()

  /// A random 16-byte token
  public var token: Data = Data()

  public var confirmationMode: Url_GroupInvite.ConfirmationMode = .automatic

  /// The group name
  public var groupName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The invite confirmation mode
  public enum ConfirmationMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// The admin will auto-accept join requests.
    case automatic // = 0

    /// The admin needs to manually confirm each join request. The user
    /// interface should ask the user to pass a message along (e.g. for
    /// identification purposes).
    case manual // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .automatic
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .automatic
      case 1: self = .manual
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .automatic: return 0
      case .manual: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Url_GroupInvite.ConfirmationMode] = [
      .automatic,
      .manual,
    ]

  }

  public init() {}
}

/// Offer or request to join the (multi-)device group.
///
/// When generated by an existing or a new device, the URL is formed using the
/// `threema` scheme in the following way:
///
/// ```text
/// threema://device-group/join#<url-safe-base64(DeviceGroupJoinRequestOrOffer)>
/// ```
///
/// When receiving this message:
///
/// 1. If `version` or `variant` is not supported, abort these steps.
/// 2. Follow the description of `RendezvousInit` to continue.
public struct Url_DeviceGroupJoinRequestOrOffer: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Url_DeviceGroupJoinRequestOrOffer.Version = .v10

  /// D2D protocol version (`d2d.ProtocolVersion`) used by the device
  ///
  /// If `0`, assume V0.1 (`0x0001`).
  public var d2DProtocolVersion: UInt32 = 0

  public var variant: Url_DeviceGroupJoinRequestOrOffer.Variant {
    get {return _variant ?? Url_DeviceGroupJoinRequestOrOffer.Variant()}
    set {_variant = newValue}
  }
  /// Returns true if `variant` has been explicitly set.
  public var hasVariant: Bool {return self._variant != nil}
  /// Clears the value of `variant`. Subsequent reads from it will return its default value.
  public mutating func clearVariant() {self._variant = nil}

  /// Data necessary to initialise a 1:1 connection between two devices.
  public var rendezvousInit: Rendezvous_RendezvousInit {
    get {return _rendezvousInit ?? Rendezvous_RendezvousInit()}
    set {_rendezvousInit = newValue}
  }
  /// Returns true if `rendezvousInit` has been explicitly set.
  public var hasRendezvousInit: Bool {return self._rendezvousInit != nil}
  /// Clears the value of `rendezvousInit`. Subsequent reads from it will return its default value.
  public mutating func clearRendezvousInit() {self._rendezvousInit = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Device join protocol version used by the device.
  public enum Version: SwiftProtobuf.Enum, Swift.CaseIterable {
    public typealias RawValue = Int

    /// Initial version.
    case v10 // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .v10
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .v10
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .v10: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static let allCases: [Url_DeviceGroupJoinRequestOrOffer.Version] = [
      .v10,
    ]

  }

  /// Variant (_offer_ or _request_)
  public struct Variant: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: Url_DeviceGroupJoinRequestOrOffer.Variant.OneOf_Type? = nil

    /// A device intends to join the (multi-)device group. `data` is to be
    /// handled according to the _Device Join Protocol_ with `ND` being the
    /// initiator.
    public var requestToJoin: Common_Unit {
      get {
        if case .requestToJoin(let v)? = type {return v}
        return Common_Unit()
      }
      set {type = .requestToJoin(newValue)}
    }

    /// A device intends to let another device join the (multi-)device group.
    /// `data` is to be handled according to the _Device Join Protocol_ with
    /// `ED` being the initiator.
    public var offerToJoin: Common_Unit {
      get {
        if case .offerToJoin(let v)? = type {return v}
        return Common_Unit()
      }
      set {type = .offerToJoin(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Type: Equatable, Sendable {
      /// A device intends to join the (multi-)device group. `data` is to be
      /// handled according to the _Device Join Protocol_ with `ND` being the
      /// initiator.
      case requestToJoin(Common_Unit)
      /// A device intends to let another device join the (multi-)device group.
      /// `data` is to be handled according to the _Device Join Protocol_ with
      /// `ED` being the initiator.
      case offerToJoin(Common_Unit)

    }

    public init() {}
  }

  public init() {}

  fileprivate var _variant: Url_DeviceGroupJoinRequestOrOffer.Variant? = nil
  fileprivate var _rendezvousInit: Rendezvous_RendezvousInit? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "url"

extension Url_GroupInvite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GroupInvite"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "admin_identity"),
    2: .same(proto: "token"),
    3: .standard(proto: "confirmation_mode"),
    4: .standard(proto: "group_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.adminIdentity) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.confirmationMode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.adminIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.adminIdentity, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularBytesField(value: self.token, fieldNumber: 2)
    }
    if self.confirmationMode != .automatic {
      try visitor.visitSingularEnumField(value: self.confirmationMode, fieldNumber: 3)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Url_GroupInvite, rhs: Url_GroupInvite) -> Bool {
    if lhs.adminIdentity != rhs.adminIdentity {return false}
    if lhs.token != rhs.token {return false}
    if lhs.confirmationMode != rhs.confirmationMode {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Url_GroupInvite.ConfirmationMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTOMATIC"),
    1: .same(proto: "MANUAL"),
  ]
}

extension Url_DeviceGroupJoinRequestOrOffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceGroupJoinRequestOrOffer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    4: .standard(proto: "d2d_protocol_version"),
    2: .same(proto: "variant"),
    3: .standard(proto: "rendezvous_init"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._variant) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rendezvousInit) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.d2DProtocolVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != .v10 {
      try visitor.visitSingularEnumField(value: self.version, fieldNumber: 1)
    }
    try { if let v = self._variant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rendezvousInit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.d2DProtocolVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.d2DProtocolVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Url_DeviceGroupJoinRequestOrOffer, rhs: Url_DeviceGroupJoinRequestOrOffer) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.d2DProtocolVersion != rhs.d2DProtocolVersion {return false}
    if lhs._variant != rhs._variant {return false}
    if lhs._rendezvousInit != rhs._rendezvousInit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Url_DeviceGroupJoinRequestOrOffer.Version: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "V1_0"),
  ]
}

extension Url_DeviceGroupJoinRequestOrOffer.Variant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Url_DeviceGroupJoinRequestOrOffer.protoMessageName + ".Variant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_to_join"),
    2: .standard(proto: "offer_to_join"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Common_Unit?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .requestToJoin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .requestToJoin(v)
        }
      }()
      case 2: try {
        var v: Common_Unit?
        var hadOneofValue = false
        if let current = self.type {
          hadOneofValue = true
          if case .offerToJoin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.type = .offerToJoin(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.type {
    case .requestToJoin?: try {
      guard case .requestToJoin(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .offerToJoin?: try {
      guard case .offerToJoin(let v)? = self.type else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Url_DeviceGroupJoinRequestOrOffer.Variant, rhs: Url_DeviceGroupJoinRequestOrOffer.Variant) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
